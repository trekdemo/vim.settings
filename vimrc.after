" .vimrc.after ( janus )
" Author: Gergo Sulymosi <gergo.sulymosi@gmail.com>

" Basic options ----------------------------------------------------------- {{{
set nowrap
set noswapfile                    " It's 2012, Vim.
set textwidth=79
set colorcolumn=81
set scrolloff=5
set formatoptions=qrn1
set clipboard+=unnamed  " Yanks go on clipboard instead.
set novisualbell  " No blinking .
set noerrorbells  " No noise.
set foldenable
set foldmethod=syntax
set foldlevel=999999
set foldlevelstart=1
set lazyredraw
set autoread
set showbreak=↪
set fillchars+=diff:⣿
set fillchars+=vert:⣿
set listchars=tab:▸\ ,trail:.,eol:¬,extends:❯,precedes:❮
set cursorline
set nohidden
set splitright
set splitbelow
set sidescroll=1
set sidescrolloff=10
set virtualedit+=block
set completeopt=longest,menuone,preview " Better Completion
set diffopt+=iwhite                     " Ignore whitespace on diffs
" }}}
" Plugin settings --------------------------------------------------------- {{{

  " Powerline {{{
    let g:Powerline_symbols = 'fancy'
  " }}}
  " Taglist {{{
    let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
  " }}}
  " vim-css-color {{{
    let g:cssColorVimDoNotMessMyUpdatetime = 1
  " }}}
  " Ctrl-P {{{
    let g:ctrlp_root_markers = ['.rvmrc']
    let g:ctrlp_working_path_mode = 2
    let g:ctrlp_max_height = 20
    let g:ctrlp_extensions = ['tag']
    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so$\|\.dll$',
      \ 'link': 'some_bad_symbolic_link',
    \ }
  " }}}
  " Bookmarking {{{
    map <localleader>bb :ToggleBookmark<CR>
    map <localleader>bn :NextBookmark<CR>
    map <localleader>bp :PreviousBookmark<CR>
    sign define bookmark text=⚑⚑
    let g:bookmarking_menu = 1
  " }}}
  " Ruby-Debugger {{{
    let g:ruby_debugger_progname = 'mvim'
    map <localleader>b  :call g:RubyDebugger.toggle_breakpoint()<CR>
    map <localleader>v  :call g:RubyDebugger.open_variables()<CR>
    map <localleader>m  :call g:RubyDebugger.open_breakpoints()<CR>
    map <localleader>t  :call g:RubyDebugger.open_frames()<CR>
    map <localleader>s  :call g:RubyDebugger.step()<CR>
    map <localleader>f  :call g:RubyDebugger.finish()<CR>
    map <localleader>n  :call g:RubyDebugger.next()<CR>
    map <localleader>c  :call g:RubyDebugger.continue()<CR>
    map <localleader>e  :call g:RubyDebugger.exit()<CR>
    map <localleader>d  :call g:RubyDebugger.remove_breakpoints()<CR>
  " }}}
  " JSHint {{{
    let g:JSLintHighlightErrorLine = 1 " Turn on jshint errors by default
  " }}}

" }}}
" Color scheme ------------------------------------------------------------ {{{

  syntax on
  set background=dark
  "colorscheme molokai
  "colorscheme molokai_mod
  colorscheme molokai_sjl

  " Highlight VCS conflict markers
  match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
  match ErrorMsg '\s\+$'

" }}}
" Mappings ---------------------------------------------------------------- {{{
" Remove selected hightlight
nnoremap <leader><space> :noh<cr>
nnoremap <cr> zvzz

" Move in screen lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

inoremap <C-S-L> <space>=><space>
inoremap <C-j> <Down>

" Tab mappings.
map <leader>tt :tabnew<cr>
map <tab> %
" map <leader>te :tabedit
" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove
" nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
nnoremap <leader>gx :Git dx<cr>
nnoremap <leader>gt :Git dt<cr>
nnoremap <leader>v V`]
"nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
inoremap jj <ESC>
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Window resizing
nnoremap <S-C-left> 5<c-w>>
nnoremap <S-C-right> 5<c-w><
" Keep search matches in the middle of the window and pulse the line when moving
" to them.
nnoremap n nzzzv
nnoremap N Nzzzv

" Don't move on *
nnoremap * *<c-o>
" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
" Easier to type, and I never use the default behavior.
noremap H ^
noremap L g_
" }}}
" Autocommands ------------------------------------------------------------ {{{
" Strip tailing whitespace

  au BufRead,BufNewFile *.as set filetype=actionscript
  au BufRead,BufNewFile {Guardfile} set ft=ruby

  " Striping whitespaces {{{
    fun! <SID>StripTrailingWhitespaces()
        let l = line(".") " Save last line
        let c = col(".")  " Save last col
        let _s=@/         " Save last search
        %s/\s\+$//e       " Strip whitespaces
        call cursor(l, c) " Restore cursor position
        let @/=_s         " Restore last search
    endfun
    au BufWritePre * :call <SID>StripTrailingWhitespaces()
   " }}}
  if 0
  " Toggle number and relativenumber {{{
    " NumberToggle toggles between relative and absolute line numbers
    function! NumberToggle()
      if(&relativenumber == 1)
        set number
      else
        set relativenumber
      endif
    endfunc

    " Automatically switch to absolute numbers when focus is lost and switch back
    " when the focus is regained.
    :au FocusLost * :set number
    :au FocusGained * :set relativenumber

    " Switch to absolute line numbers when entering insert mode and switch back to
    " relative line numbers when switching back to normal mode.
    autocmd InsertEnter * :set number
    autocmd InsertLeave * :set relativenumber

    if exists('g:NumberToggleTrigger')
      exec "nnoremap " . g:NumberToggleTrigger . " :call NumberToggle()<cr>"
    else
      nnoremap <C-n> :call NumberToggle()<cr>
    endif
   " }}}
  endif

" }}}
" Folding ----------------------------------------------------------------- {{{
" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()
" }}}
" Various filetype-specific stuff ----------------------------------------- {{{

" Ruby {{{

augroup ft_ruby
    au!
    au Filetype ruby setlocal foldmethod=syntax
augroup END

" }}}
" Vim {{{

augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}
" QuickFix {{{

augroup ft_quickfix
    au!
    au Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap
augroup END

" }}}
" CSS, SASS and LessCSS {{{

augroup ft_css
    au!

    au BufNewFile,BufRead *.less setlocal filetype=less
    au BufNewFile,BufRead *.scss setlocal filetype=scss

    au Filetype less,css,scss setlocal foldmethod=marker
    au Filetype less,css,scss setlocal foldmarker={,}
    au Filetype less,css,scss setlocal omnifunc=csscomplete#CompleteCSS
    au Filetype less,css,scss setlocal iskeyword+=-

    " Use <leader>S to sort properties.  Turns this:
    "
    "     p {
    "         width: 200px;
    "         height: 100px;
    "         background: red;
    "
    "         ...
    "     }
    "
    " into this:

    "     p {
    "         background: red;
    "         height: 100px;
    "         width: 200px;
    "
    "         ...
    "     }
    au BufNewFile,BufRead *.less,*.css,*.scss nnoremap <buffer> <localleader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>

    " Make {<cr> insert a pair of brackets in such a way that the cursor is correctly
    " positioned inside of them AND the following code doesn't get unfolded.
    au BufNewFile,BufRead *.less,*.css,*.scss inoremap <buffer> {<cr> {}<left><cr><space><space><space><space>.<cr><esc>kA<bs>
augroup END

" }}}
" PHP {{{

augroup ft_php
    au!
    au Filetype php setlocal foldmethod=syntax
augroup END

" }}}

" }}}
" Shell ------------------------------------------------------------------- {{{

function! s:ExecuteInShell(command) " {{{
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'botright vnew ' . fnameescape(command) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap nonumber
    echo 'Execute ' . command . '...'
    silent! execute 'silent %!'. command
    silent! redraw
    silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>:AnsiEsc<CR>'
    silent! execute 'nnoremap <silent> <buffer> q :q<CR>'
    silent! execute 'AnsiEsc'
    echo 'Shell command ' . command . ' executed.'
endfunction " }}}
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
nnoremap <leader>! :Shell

" }}}
" Convenience mappings ---------------------------------------------------- {{{

" Change case
nnoremap <C-u> gUiw
inoremap <C-u> <esc>gUiwea

" Substitute
nnoremap <leader>s :%s//<left>

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" }}}
" Insert Mode Completion -------------------------------------------------- {{{

inoremap <c-l> <c-x><c-l>
inoremap <c-f> <c-x><c-f>

" }}}
" Quick editing ----------------------------------------------------------- {{{

nnoremap <leader>ev <C-w>s<C-w>j<C-w>L:e ~/.vimrc.after<cr>
nnoremap <leader>em <C-w>s<C-w>j<C-w>L:e ~/.gvimrc.after<cr>
nnoremap <leader>es <C-w>s<C-w>j<C-w>L:e ~/.vim/janus/vim/tools/snipmate-snippets<cr>
nnoremap <leader>eg <C-w>s<C-w>j<C-w>L:e ~/.gitconfig<cr>
nnoremap <leader>ez <C-w>s<C-w>j<C-w>L:e ~/.zshrc<cr>

" }}}
